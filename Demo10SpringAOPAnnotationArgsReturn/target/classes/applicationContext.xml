<?xml version="1.0" encoding="UTF-8"?>
<beans
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	
	 xmlns:aop="http://www.springframework.org/schema/aop"   
	
	xmlns:p="http://www.springframework.org/schema/p"
   
	xsi:schemaLocation="http://www.springframework.org/schema/beans  
	                    http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
	                    http://www.springframework.org/schema/aop 
	                    http://www.springframework.org/schema/aop/spring-aop-2.5.xsd">
    <aop:aspectj-autoproxy></aop:aspectj-autoproxy>
    <bean   id="myAspect"   class="com.wat.aspect.PersonAspect"></bean>
    <bean   id="personService"  class="com.wat.service.impl.PersonServiceImpl"></bean>
    <!-- 
			      通过配置织入@Aspectj切面 
			      虽然可以通过编程的方式织入切面，但是一般情况下，我们还是使用spring的配置自动完成创建代理织入切面的工作。 
			      通过aop命名空间的<aop:aspectj-autoproxy/>声明自动为spring容器中那些配置@aspectJ切面的bean创建代理，织入切面。当然，spring 
			      在内部依旧采用AnnotationAwareAspectJAutoProxyCreator进行自动代理的创建工作，但具体实现的细节已经被<aop:aspectj-autoproxy 
			/>隐藏起来了 
			    <aop:aspectj-autoproxy/>有一个proxy-target-class属性，默认为false，表示使用jdk动态代理织入增强，当配为<aop:aspectj-autoproxy  
			poxy-target-class="true"/>时，表示使用CGLib动态代理技术织入增强。不过即使proxy-target-class设置为false，如果目标类没有声明接口，则spring将自动使用CGLib动态代理。 
     -->
    
    
   
</beans>